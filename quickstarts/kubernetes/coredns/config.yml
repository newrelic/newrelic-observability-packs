id: c9ac4abb-4a61-4eee-9e1e-79506806684e
slug: coredns
title: CoreDNS
description: |
  ## Why monitor CoreDNS?

  CoreDNS is DNS server that can serve as the Kubernetes cluster DNS (Kubernetes 1.23+ uses CoreDNS by default).
  CoreDNS is a critical component of a Kubernetes cluster that can be difficult to debug during an error scenario. Surfacing monitoring to this component can help teams respond faster to these unexpected scenarios.

  ## CoreDNS quickstart highlights

  The New Relic quickstart uses dashboards to proactively monitor your CoreDNS servers, like:

  - load shared amongst running instances
  - request & response stats (rate, payload size, etc.)
  - cache hit ratio
  - response codes and panics, and more.

  ## Monitoring CoreDNS

  This quickstart utilizes New Relic's ability to ingest Prometheus data (either from our OpenMetrics integration or via Prometheus remote write). See instructions for [sending Prometheus data to New Relic here](https://docs.newrelic.com/docs/infrastructure/prometheus-integrations/get-started/send-prometheus-metric-data-new-relic/).

  ### How do I enable monitoring in CoreDNS

  [CoreDNS provides a plugin](https://coredns.io/plugins/metrics/) to surface Prometheus metrics on `localhost:9153/metrics`.
  Before attempting to modify your CoreDNS configuration, you should be able to `kubectl port-forward pod/<pod_name> -n kube-system 9153` against a CoreDNS server in your cluster to verify it returns metrics.

  For instructions on modifying your cluster's CoreDNS configuration see https://coredns.io/2018/01/29/deploying-kubernetes-with-coredns-using-kubeadm/


  ### How do I configure my integration to scrape CoreDNS severs?

  The approach to getting your Prometheus metrics into New Relic differs depending on which integration you use.

  #### Prometheus Remote Write

  In addition to setting up your `remote_write` configuration as described [here](https://docs.newrelic.com/docs/infrastructure/prometheus-integrations/install-configure-remote-write/set-your-prometheus-remote-write-integration/), you will need to add the following scrape configuration to your `prometheus.yml` config file:

  ```
  - job_name: 'kube-dns'
    honor_labels: true
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - action: keep
        source_labels:
          - __meta_kubernetes_namespace
          - __meta_kubernetes_pod_name
        separator: '/'
        regex: 'kube-system/coredns.+'
      - source_labels:
          - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: metrics
      - source_labels:
          - __meta_kubernetes_pod_name
        action: replace
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
  ```
  (This helpful Prometheus job defnition sourced from [sysdig blog](https://sysdig.com/blog/how-to-monitor-coredns/))

  Then, after reloading Prometheus config, you can check that your CoreDNS pods are appearing under your [Prometheus targets](https://prometheus.io/docs/prometheus/latest/querying/api/#targets).

  #### Prometheus OpenMetrics integration

  POMI will scrape any resource that contains the label or annotation `prometheus.io/scrape` (which is configurable value here https://github.com/newrelic/helm-charts/blob/ecef47fc938b7ddca8a50e63cb290924f654c56a/charts/nri-prometheus/values.yaml#L117).
  This will make targets visible to POMI but to confiugre the `relabel_configs` as above, the defaults would have to be updated in the Helm chart here: https://github.com/newrelic/helm-charts/blob/ecef47fc938b7ddca8a50e63cb290924f654c56a/charts/nri-prometheus/values.yaml#L67-L244

summary: |
  Visualize CoreDNS performance and alert on potential errors. CoreDNS is a critical Kubernetes cluster component and can be difficult to troubleshoot in an error scenario. Download New Relic CoreDNS quickstart to increase cluster visibility.

level: New Relic

authors:
  - New Relic

keywords:
  - kubernetes
  - dns
  - k8s

  # Reference to install plans located under /install directory
  # Allows us to construct reusable "install plans" and just use their ID in the quickstart config
installPlans:
  - third-party-coredns
  - kubernetes-install

# Documentation references
documentation:
  - name: Installation docs
    url: https://docs.newrelic.com
    description: Description about this doc reference
  - name: Kubernetes & CoreDNS
    url: https://kubernetes.io/docs/tasks/administer-cluster/coredns/
    description: Details on Kubernetes and CoreDNS
  - name: CoreDNS Prometheus monitoring
    url: https://coredns.io/plugins/metrics/
    description: Metric details exposed by Prometheus CoreDNS extension

# Content / Design
icon: logo.png
website: https://coredns.io/
