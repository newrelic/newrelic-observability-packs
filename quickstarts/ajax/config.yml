id: ab83f4c2-4e75-4767-8dea-fd6ab940a2dd
displayName: Ajax Requests
slug: ajax-example
title: Ajax Requests

summary: >-
  An Ajax dashboard based on New Relic Browser agent data. AJAX (Asynchronous JavaScript and XML) is a set of web development techniques that allows web applications to update and display data on a web page without requiring a full page reload. AJAX uses JavaScript to asynchronously send requests to the server and update only the necessary parts of the page with the response data.

description: |
  **A dashboard that displays the performance of your Ajax Request**

  **Benefits of understanding AJAX requests**
  1. **Identify performance issues:** By reviewing AJAX requests in New Relic, you can identify performance issues with your application. New Relic provides detailed metrics on AJAX requests, such as response time, throughput, and error rates, which can help you identify performance bottlenecks.

  2.  **Troubleshoot errors:** If an AJAX request fails or returns an error, New Relic can provide detailed information on the error, including the status code and error message. This information can help you quickly identify and troubleshoot errors in your application.

  3.  **Monitor third-party dependencies:** If your application depends on third-party services, you can use New Relic to monitor the performance of those services. New Relic can provide insights into the performance of AJAX requests to third-party services, such as response time and error rates.

  4.  **Optimize application performance:** By reviewing AJAX requests in New Relic, you can identify opportunities to optimize your application's performance. For example, you may identify slow-loading AJAX requests that can be optimized by reducing the size of the payload or optimizing the code.

    

  **Distributed tracing with AJAX requests in a microsystem architecture can provide several benefits:**
  1.  **End-to-end visibility:** Distributed tracing allows you to trace the flow of a request across multiple services in your microsystem architecture. With AJAX requests, you can trace the request from the client-side through to the server-side, allowing you to see the complete end-to-end flow of the request.
      
  2.  **Performance monitoring:** Distributed tracing can provide valuable insights into the performance of your microsystem architecture. By tracing the flow of requests, you can identify bottlenecks and optimize the performance of your system.
      
  3.  **Debugging and troubleshooting:** Distributed tracing can make it easier to debug and troubleshoot issues in your microsystem architecture. By tracing the flow of a request, you can quickly identify which service is causing the issue and address it.
      
  4.  **Root cause analysis:** Distributed tracing can help you identify the root cause of issues in your microsystem architecture. By tracing the flow of requests, you can identify the root cause of a problem and take steps to prevent similar issues from occurring in the future.

icon: logo.svg

documentation:
  - name: Browser
    description: >-
      With New Relic One's browser monitoring solution, you get full visibility into the complete webpage life cycle of your application or website
    url: https://docs.newrelic.com/docs/browser/
installPlans:
  - browser-docs
dataSourceIds:
  - new-relic-browser

keywords:
  - apm
  - browser agent
  - web
  - javascript
  - chrome
  - firefox
  - safari
  - ajax
  - NR1_addData  
  - NR1_sys

dashboards:
  - ajax

alertPolicies:
  - browser

  # Authors of the quickstart (required)
authors:
  - Darren Doyle
  - Kinsey
